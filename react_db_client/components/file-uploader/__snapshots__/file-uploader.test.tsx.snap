// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`file-uploader Unit Testing should add files to selected on file select 1`] = `
"<FileUploader fileType=\\"image\\" asyncFileUpload={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onUpload={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }}>
  <div className=\\"fileUploader\\">
    <styled.div className=\\"fileUploader_btnsWrap\\">
      <div className=\\"sc-ftTHYK irEGEY fileUploader_btnsWrap\\">
        <label className=\\"button button-one fileUploader_selectBtn\\">
          Select Files
          <input style={{...}} name=\\"file\\" id=\\"file\\" className=\\"fileUploader_fileInput\\" type=\\"file\\" accept=\\"image/*\\" onChange={[Function: handleFilesSelected]} multiple={true} />
        </label>
        <styled.button type=\\"button\\" disabled={false} className=\\"button-two uploadBtn\\" onClick={[Function: onClick]}>
          <button type=\\"button\\" disabled={false} className=\\"sc-iBYQkv egJxcX button-two uploadBtn\\" onClick={[Function: onClick]}>
            Upload
          </button>
        </styled.button>
      </div>
    </styled.div>
    <StyledSelectList listInput={{...}} headings={{...}} handleSelect={[Function: handleSelect]} currentSelection={{...}} selectionField=\\"uid\\" autoWidth={true} limitHeight={0} customParsers={{...}}>
      <styled.div style={{...}} data-testid=\\"styledSelectList\\">
        <div style={{...}} data-testid=\\"styledSelectList\\" className=\\"sc-gswNZR leMfon\\">
          <styled.div>
            <div className=\\"sc-dkrFOg iujzfJ\\">
              <styled.div style={{...}}>
                <div style={{...}} className=\\"sc-jSUZER kdPRE\\">
                  Name
                </div>
              </styled.div>
            </div>
          </styled.div>
          <styled.ul limitHeight={false} style={{...}} role=\\"list\\">
            <ul style={{...}} role=\\"list\\" className=\\"sc-hLBbgP kzKYkb\\">
              <ListItem data={{...}} handleSelect={[Function: handleSelect]} headings={{...}} columnWidths={{...}} customParsers={{...}} isSelected={false}>
                <styled.button type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\" className=\\"styledList_itemBtn\\" selected={false}>
                  <button type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\" className=\\"sc-eDvSVe gIItyE styledList_itemBtn\\" selected={false}>
                    <styled.div style={{...}}>
                      <div style={{...}} className=\\"sc-gKPRtg lyePn\\">
                        fileA
                      </div>
                    </styled.div>
                  </button>
                </styled.button>
              </ListItem>
              <ListItem data={{...}} handleSelect={[Function: handleSelect]} headings={{...}} columnWidths={{...}} customParsers={{...}} isSelected={false}>
                <styled.button type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\" className=\\"styledList_itemBtn\\" selected={false}>
                  <button type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\" className=\\"sc-eDvSVe gIItyE styledList_itemBtn\\" selected={false}>
                    <styled.div style={{...}}>
                      <div style={{...}} className=\\"sc-gKPRtg lyePn\\">
                        fileB
                      </div>
                    </styled.div>
                  </button>
                </styled.button>
              </ListItem>
            </ul>
          </styled.ul>
        </div>
      </styled.div>
    </StyledSelectList>
  </div>
</FileUploader>"
`;

exports[`file-uploader shallow renders Matches Snapshot 1`] = `
"<div className=\\"fileUploader\\">
  <styled.div className=\\"fileUploader_btnsWrap\\">
    <label className=\\"button button-two fileUploader_selectBtn\\">
      Select Files
      <input style={{...}} name=\\"file\\" id=\\"file\\" className=\\"fileUploader_fileInput\\" type=\\"file\\" accept=\\"image/*\\" onChange={[Function: handleFilesSelected]} multiple={true} />
    </label>
    <styled.button type=\\"button\\" disabled={true} className=\\"button-two uploadBtn\\" onClick={[Function: onClick]}>
      Upload
    </styled.button>
  </styled.div>
  <StyledSelectList listInput={{...}} headings={{...}} handleSelect={[Function: handleSelect]} currentSelection={{...}} selectionField=\\"uid\\" autoWidth={true} limitHeight={0} customParsers={{...}} />
</div>"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`file-uploader Unit Testing should add files to selected on file select 1`] = `
"<FileUploader collectionId=\\"demoCollectionId\\" documentId=\\"demoDocumentId\\" fileType=\\"image\\" asyncUpload={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onUpload={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }}>
  <div className=\\"fileUploader\\">
    <div className=\\"fileUploader_btnsWrap\\">
      <label className=\\"button button-one fileUploader_selectBtn\\">
        Select Files
        <input style={{...}} name=\\"file\\" id=\\"file\\" className=\\"fileUploader_fileInput\\" type=\\"file\\" accept=\\"image/*\\" onChange={[Function: handleFilesSelected]} multiple={true} />
      </label>
      <button type=\\"button\\" disabled={false} className=\\"button-two uploadBtn\\" onClick={[Function: onClick]}>
        Upload
      </button>
    </div>
    <StyledSelectList listInput={{...}} headings={{...}} handleSelect={[Function: handleSelect]} currentSelection={{...}} selectionField=\\"uid\\" autoWidth={true} limitHeight={0} customParsers={{...}}>
      <div className=\\"styledList\\" style={{...}}>
        <div style={{...}} className=\\"styledList_headings\\">
          <div className=\\"styledList_heading\\" style={{...}}>
            Name
          </div>
        </div>
        <div style={{...}} className=\\"styledList_items \\" role=\\"list\\">
          <ListItem data={{...}} currentSelection={{...}} selectionField=\\"uid\\" handleSelect={[Function: handleSelect]} headings={{...}} columnWidths={{...}} customParsers={{...}} isSelected={false} classes={{...}}>
            <button className=\\"styledList_itemBtn styledList_itemBtn \\" type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\">
              <div style={{...}} className=\\"styledList_itemCell \\">
                fileA
              </div>
            </button>
          </ListItem>
          <ListItem data={{...}} currentSelection={{...}} selectionField=\\"uid\\" handleSelect={[Function: handleSelect]} headings={{...}} columnWidths={{...}} customParsers={{...}} isSelected={false} classes={{...}}>
            <button className=\\"styledList_itemBtn styledList_itemBtn \\" type=\\"button\\" onClick={[Function: onClick]} role=\\"listitem\\">
              <div style={{...}} className=\\"styledList_itemCell \\">
                fileB
              </div>
            </button>
          </ListItem>
        </div>
      </div>
    </StyledSelectList>
  </div>
</FileUploader>"
`;

exports[`file-uploader shallow renders Matches Snapshot 1`] = `
"<div className=\\"fileUploader\\">
  <div className=\\"fileUploader_btnsWrap\\">
    <label className=\\"button button-two fileUploader_selectBtn\\">
      Select Files
      <input style={{...}} name=\\"file\\" id=\\"file\\" className=\\"fileUploader_fileInput\\" type=\\"file\\" accept=\\"image/*\\" onChange={[Function: handleFilesSelected]} multiple={true} />
    </label>
    <button type=\\"button\\" disabled={true} className=\\"button-two uploadBtn\\" onClick={[Function: onClick]}>
      Upload
    </button>
  </div>
  <StyledSelectList listInput={{...}} headings={{...}} handleSelect={[Function: handleSelect]} currentSelection={{...}} selectionField=\\"uid\\" autoWidth={true} limitHeight={0} customParsers={{...}} />
</div>"
`;
